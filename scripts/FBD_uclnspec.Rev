
################################################################################
#
# RevBayes script: A simple FBD analysis
#
# This file: Runs the full MCMC ...
#
# authors: Tracy A. Heath, Josh Justison, JoÃ«lle Barido-Sottani, and Walker Pett
#
################################################################################
#######################
# Reading in the Data #
#######################
# Read the full list of taxa (including all fossils and extant species #
taxa <- readTaxonData("data/Simulated_Fossil_Intervals_Tue_Sep_13_14-03-55_2022.tsv")
# Import the morphological character matrix #
# this file contains only the taxa for which morphological characters are available #
morpho <- readDiscreteCharacterData("data/Simulated_Character_Data_Tue_Sep_13_14-03-55_2022.nex")

otus <- taxa.size();
# Import the morphological character matrix #
# this file contains only the taxa for which morphological characters are available #

## helpers
n_taxa <- taxa.size();
moves = VectorMoves();
num_branches <- 2 * n_taxa - 2;
print("processed data");

##########################################################################################
# Joint Fossilized Birth-Death Process prior on the topology and fossil occurrence times #
##########################################################################################

# Define exponential priors on the birth rate and death rate #
speciation_rate ~ dnExponential(1)
#extinction_rate ~ dnExponential(1)
turnover ~ dnUnif(0.5, 1.0);

# Specify a scale move on the speciation_rate parameter #
# This move will be applied with 3 different tuning values (lambda) to help improve mixing #
moves.append( mvScale(speciation_rate, weight=1) )

# Specify a scale move on the extinction_rate parameter #
# This move will be applied with 3 different tuning values (lambda) to help improve mixing #
moves.append(mvSlide(turnover, delta=1.00, weight=1));

# Create deterministic nodes for the diversification and turnover rates so that they can be monitored #
#diversification := speciation_rate - extinction_rate
extinction_rate := turnover*speciation_rate;

# Fix the probability of sampling parameter (rho) to 1, #
# because all extant bears are represented in this analysis #
#rho <- 0.43
rho <- 0.0;

# Assume an exponential prior on the rate of sampling fossils (psi) #
psi ~ dnExponential(1)

# Specify a scale move on the psi parameter #
# This move will be applied with 3 different tuning values (lambda) to help improve mixing #
moves.append( mvScale(psi, weight=1) );

# The FBD is conditioned on a starting time for the process, which is the origin time #
# Specify a uniform prior on the origin #
#origin_time ~ dnUnif(5, 7);
max_max_age <- taxa[1].getMaxAge();
for (i in 2:otus) if (max_max_age < taxa[i].getMaxAge())   max_max_age <- taxa[i].getMaxAge()
origin_time ~ dnUnif(max_max_age,max_max_age*2);

# Specify a sliding-window move on the origin_time parameter #
# This move will be applied with 3 different window widths (delta) to help improve mixing #
moves.append( mvSlide(origin_time, weight=1.0) )

### Define the tree-prior distribution as the fossilized birth-death process ###
fbd_dist = dnBDSTP(origin=origin_time, lambda=speciation_rate, mu=extinction_rate, psi=psi, rho=rho, taxa=taxa);

# constrain tree to match the original
#constraints_file <- "data/Simulated_RevBayes_Constraints_Tue_Sep_13_14-03-55_2022.rev";
#source(constraints_file);
#constraints = v(clade_23,clade_22,clade_21,clade_20,clade_19,clade_18,clade_17,clade_16,clade_15,clade_14,clade_13,clade_12,clade_11,clade_10,clade_09,clade_08,clade_07,clade_06,clade_05,clade_04,clade_03,clade_02,clade_01);

#fbd_tree ~ dnConstrainedTopology(fbd_dist,constraints=constraints);
#fbd_tree
fbd_tree ~ dnBDSTP(origin=origin_time, lambda=speciation_rate, mu=extinction_rate, psi=psi, rho=rho, taxa=taxa);

# Specify moves on the tree and node times #
# These moves update the tree topology
moves.append( mvFNPR(fbd_tree, weight=15.0) )
moves.append( mvCollapseExpandFossilBranch(fbd_tree, origin_time, weight=6.0) )

# These moves update the node ages #
# Because we are conditioning on the origin time, we must also sample the root node age #
moves.append( mvNodeTimeSlideUniform(fbd_tree, weight=40.0) )
moves.append( mvRootTimeSlideUniform(fbd_tree, origin_time, weight=5.0) )

### Use stratigraphic range data to explicitly sample the fossil occurence times ###
# Use a for loop to create a uniform distribution on the occurence time for each fossil #
# The boundaries of the uniform distribution are specified in the tsv file #
fossils = fbd_tree.getFossils()
for(i in 1:fossils.size())  {
  t[i] := tmrca(fbd_tree, clade(fossils[i]))

  a_i = fossils[i].getMinAge()
  b_i = fossils[i].getMaxAge()

  F[i] ~ dnUniform(t[i] - b_i, t[i] - a_i)
  F[i].clamp( 0 )
}

# Add a move to sample the fossil times #
moves.append( mvFossilTimeSlideUniform(fbd_tree, origin_time, weight=5.0) )
print("processed FBD");

# For undated
#br_len_lambda ~ dnExp(0.2)
#moves.append( mvScale(br_len_lambda, weight=2) )

# Define the tree parameter.
# First, we generate the topology.
# We assume a uniform prior on topology.
#fbd_tree ~ dnUniformTopologyBranchLength(taxa, branchLengthDistribution=dnExponential(br_len_lambda))
#moves.append( mvNNI(fbd_tree, weight=num_branches/2.0) )
#moves.append( mvSPR(fbd_tree, weight=num_branches/10.0) )
#moves.append( mvBranchLengthScale(fbd_tree, weight=num_branches) )


# compute the tree length from the phylogeny
#tree_length := fbd_tree.treeLength()

#Set up Gamma-distributed rate variation.
alpha_morpho ~ dnExponential( 1.0 )
rates_morpho := fnDiscretizeGamma( alpha_morpho, alpha_morpho, 4 )

#Moves on the parameters to the Gamma distribution.
moves.append( mvScale(alpha_morpho, weight=5.0) )

# We assume a strict morphological clock rate, drawn from an exponential prior #
#clock_morpho ~ dnExponential(1.0)
#moves.append( mvScale(clock_morpho, weight=4.0) )

ucln_mean ~ dnExponential(2.0)
### we will also estimate the standard deviation of the lognormal (ucln_sigma) with an exponential hyperprior
ucln_sigma ~ dnExponential(3.0)
### we can create deterministic nodes for the variance and mu of the lognormal
ucln_var := ucln_sigma * ucln_sigma
ucln_mu := ln(ucln_mean) - (ucln_var * 0.5)
### both the ucln_mean and ucln_sigma will be operated on by scale moves
moves.append(mvScale(ucln_mean, lambda=1.0, tune=true, weight=4.0))
moves.append(mvScale(ucln_sigma, lambda=0.5, tune=true, weight=4.0))

### now we will create a vector of stochastic nodes
### each element in the vector represents a branch rate
### the indices of the vector correspond to branch indices in the tree
### using a for-lop initialize the branch rates and assign a move to each one
n_branches <- fbd_tree.ntips()*2 - 2

sr <-abs(speciation_rate)
pi_prior := v(sr, sr, sr)
root_state <- simplex(sr, sr,sr )
for(i in 1:n_branches){
  pi[i] ~ dnDirichlet(pi_prior)
  freq_zero[i] := pi[i][1]
  freq_one[i]  := pi[i][2]
  freq_two[i]  := pi[i][3]
  moves.append( mvBetaSimplex(pi[i], alpha=10, weight=4.0) )

  branch_rates[i] ~ dnLnorm(ucln_mu, ucln_sigma)
  moves.append(mvScale(branch_rates[i],lambda=1.0,tune=true,weight=2.0))
  Q_morpho[i] := fnF81(pi[i])
  Q_morpho[i]
  }
### add 2 more moves on the branch rate vector
moves.append(mvVectorScale(branch_rates,lambda=1.0,tune=true,weight=2.0))
moves.append(mvVectorSingleElementScale(branch_rates,lambda=30.0,tune=true,weight=1.0))

### a helpful parameter to monitor
mean_rt := mean(branch_rates)


### Create the substitution model and clamp with our observed Standard data ###
# Here we use the option siteMatrices=true specify that the vector Q #
# represents a site-specific mixture of rate matrices #
# We also condition on observing only variable characters using coding="variable" #
phyMorpho ~ dnPhyloCTMC(tree=fbd_tree, siteRates=rates_morpho, branchRates=branch_rates, Q=Q_morpho, type="Standard", coding="variable", rootFrequencies = root_state)
phyMorpho.clamp(morpho)


########
# MCMC #
########

# initialize the model object #
mymodel = model(fbd_tree)

monitors = VectorMonitors()

# Create a vector of monitors #
output_file1 <- "output/Simulated_" + "branch_specific_long_test" + "_Dated.log";
output_file2 <- "output/Simulated_" + "branch_specific_long_test" + "_Dated.tre";

# 1. for the full model #
monitors.append( mnModel(filename=output_file1, printgen=100, exclude = ["F"]) );

# 2. the tree #
monitors.append( mnFile(filename=output_file2, printgen=100, fbd_tree) );

# 3. and a few select parameters to be printed to the screen #
monitors.append( mnScreen(printgen=100) )

# Initialize the MCMC object #
mymcmc = mcmc(mymodel, monitors, moves)

# Run the MCMC #
mymcmc.run(generations=1000000)

# Quit RevBayes #
q()
